plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.hamtalk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// implementation : 코드가 실행될 때 필요한 라이브러리
// annotationProcessor : 코드를 컴파일(빌드)할 때만 잠깐 실행되는 프로그램 -> ex) Lombok
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    // swagger 2.6 버전은
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // 사용자에게 이메일 전송을 하기 위해 필요.
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // redis 직렬화를 위한 라이브러리 추가(createdAt 직렬화를 위한)
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // ---- 여기부터 QueryDSL 의존성 ---
    // QueryDSL 5.0 버전 의존성 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    // QueryDSL Q-Type 자동 생성기 : @Entity 스캔해서 -> QEntity 클래스를 자동 생성 -> 앱이 실행될 때, 필요 X, 컴파일 때만 필요.
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    // QueryDSL 자동 생성기가 참고할 메뉴얼
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // ---- 여기까지 QueryDSL 의존성 ---
}

tasks.named('test') {
    useJUnitPlatform()
}

// 1. Q-Type이 저장될 폴더 경로를 변수로 지정
def querydslDir = "$buildDir/generated/querydsl"

// 2. IntelliJ가 생성된 Q-Type을 우리 소스 코드의 일부로 인식하게 설정
sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

// 3. 자바 컴파일 시, Q-Type을 생성하고 'querydslDir'에 저장하도록 명령
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

// 4. 프로젝트 clean 시, 생성된 Q-Type 폴더도 같이 삭제하도록 설정
clean.doLast {
    file(querydslDir).deleteDir()
}

